swagger: "2.0"
info:
  description: "This API allows the user to log out by invalidating their refresh token. The refresh token is blacklisted in Redis and marked as expired in the database."
  version: "1.0.0"
  title: "Authentication API"

host: "localhost"
basePath: "/api/v1"

paths:
  /logout:
    post:
      summary: "Logs out the user by invalidating their refresh token"
      description: |
        This route logs the user out by blacklisting their refresh token in Redis
        and marking its status as expired in the database. This ensures the refresh token 
        can no longer be used for generating new access tokens.

      operationId: "logout"
      tags:
        - "Authentication"

      parameters:
        - name: "Authorization"
          in: "header"
          description: "JWT token required for authenticating the logout request"
          required: true
          type: "string"

        - name: "token_id"
          in: "body"
          description: "The ID of the refresh token to be invalidated."
          required: true
          schema:
            type: "object"
            properties:
              token_id:
                type: "string"
                description: "The refresh token ID to be invalidated."

      responses:
        200:
          description: "Success. The refresh token has been blacklisted and marked as expired."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Logged out successfully"
          examples:
            application/json:
              {
                "message": "Logged out successfully"
              }

        400:
          description: "Bad request. Missing refresh token ID."
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Refresh token ID is required"
          examples:
            application/json:
              {
                "error": "Refresh token ID is required"
              }

        401:
          description: "Unauthorized. Invalid or expired refresh token."
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Invalid or expired refresh token"
          examples:
            application/json:
              {
                "error": "Invalid or expired refresh token"
              }

        500:
          description: "Internal server error. Failure while processing logout."
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "An unexpected error occurred"
          examples:
            application/json:
              {
                "error": "An unexpected error occurred"
              }

securityDefinitions:
  jwtAuth:
    type: "apiKey"
    in: "header"
    name: "Authorization"
    description: "JWT authentication token"
