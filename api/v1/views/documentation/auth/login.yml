swagger: "2.0"
info:
  description: "This API allows users to authenticate by providing their username/email and password, generating an access token and a refresh token."
  version: "1.0.0"
  title: "Authentication API"

host: "localhost"
basePath: "/api/v1"

paths:
  /login:
    post:
      summary: "Login and authenticate the user"
      description: |
        This route authenticates a user by verifying their credentials (username/email and password).
        If the credentials are valid, the system generates an access token and refresh token and 
        returns them to the user. The refresh token is also stored in both the database and Redis cache.

      operationId: "login"
      tags:
        - "Authentication"

      parameters:
        - name: "Authorization"
          in: "header"
          description: "JWT token required for refreshing the access token"
          required: false
          type: "string"
        
        - name: "loginData"
          in: "body"
          description: "The user credentials to authenticate."
          required: true
          schema:
            type: "object"
            properties:
              username:
                type: "string"
                description: "The user's username (optional if email is provided)."
              email:
                type: "string"
                description: "The user's email (optional if username is provided)."
              password:
                type: "string"
                description: "The user's password."
        
      responses:
        200:
          description: "User logged in successfully"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Logged in successfully"
              access_token:
                type: "string"
                description: "JWT access token"
              refresh_token:
                type: "string"
                description: "JWT refresh token"
              token_id:
                type: "string"
                description: "ID of the refresh token stored in the database"
          examples:
            application/json:
              {
                "message": "Logged in successfully",
                "access_token": "access-token-here",
                "refresh_token": "refresh-token-here",
                "token_id": "12345"
              }

        400:
          description: "Bad request. Missing or invalid data."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Email or username and password are required!"
          examples:
            application/json:
              {
                "message": "Email or username and password are required!"
              }

        401:
          description: "Unauthorized. User not found or incorrect password."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "User not found!"
          examples:
            application/json:
              {
                "message": "User not found!"
              }

        500:
          description: "Internal server error. Unexpected error during token saving."
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "An unexpected error occurred"
          examples:
            application/json:
              {
                "error": "An unexpected error occurred"
              }

securityDefinitions:
  jwtAuth:
    type: "apiKey"
    in: "header"
    name: "Authorization"
    description: "JWT authentication token"
