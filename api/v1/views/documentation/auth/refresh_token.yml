swagger: "2.0"
info:
  description: "This API allows the user to refresh the access token and refresh token by providing the refresh token ID. The refresh token is rotated to ensure security."
  version: "1.0.0"
  title: "Authentication API"

host: "localhost"
basePath: "/api/v1"

paths:
  /refresh-token:
    post:
      summary: "Refreshes the access token and the refresh token"
      description: |
        This route refreshes the user's access token and refresh token. The refresh token
        is rotated to ensure its validity and prevent misuse. The process checks Redis for the 
        stored refresh token and falls back to the database if Redis is unavailable.
        The refresh token is also blacklisted after it is used.

      operationId: "refreshToken"
      tags:
        - "Authentication"

      parameters:
        - name: "Authorization"
          in: "header"
          description: "JWT token required for authenticating the refresh token request"
          required: true
          type: "string"
        
        - name: "token_id"
          in: "body"
          description: "The ID of the refresh token to be rotated."
          required: true
          schema:
            type: "object"
            properties:
              token_id:
                type: "string"
                description: "The refresh token ID to be rotated."
        
      responses:
        200:
          description: "Success. The access token and refresh token have been refreshed."
          schema:
            type: "object"
            properties:
              token_id:
                type: "string"
                description: "ID of the new refresh token."
              access_token:
                type: "string"
                description: "The new access token"
              refresh_token:
                type: "string"
                description: "The new refresh token"
          examples:
            application/json:
              {
                "token_id": "12345",
                "access_token": "new-access-token-here",
                "refresh_token": "new-refresh-token-here"
              }

        400:
          description: "Bad request. Missing or invalid data."
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Refresh token ID is required"
          examples:
            application/json:
              {
                "error": "Refresh token ID is required"
              }

        401:
          description: "Unauthorized. Invalid, expired, or revoked refresh token."
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Invalid or expired refresh token"
          examples:
            application/json:
              {
                "error": "Invalid or expired refresh token"
              }

        404:
          description: "User not found."
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "User not found"
          examples:
            application/json:
              {
                "error": "User not found"
              }

        500:
          description: "Internal server error. Redis or database failure."
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "An unexpected error occurred"
          examples:
            application/json:
              {
                "error": "An unexpected error occurred"
              }

securityDefinitions:
  jwtAuth:
    type: "apiKey"
    in: "header"
    name: "Authorization"
    description: "JWT authentication token"
