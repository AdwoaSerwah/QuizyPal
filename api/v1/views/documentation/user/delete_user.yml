swagger: "2.0"
info:
  description: "This API allows the deletion of a specific user by their user_id."
  version: "1.0.0"
  title: "Delete User API"

host: "localhost"
basePath: "/api/v1"

paths:
  /users/{user_id}:
    delete:
      summary: "Delete a specific user by their user_id."
      description: |
        This route deletes a user based on the provided user_id after verifying 
        that the user making the request is either an admin or the user themselves.
      
      operationId: "deleteUser"
      tags:
        - "User"

      parameters:
        - name: "user_id"
          in: "path"
          description: "The unique identifier for the user to be deleted."
          required: true
          type: "string"

      security:
        - jwtAuth: []

      responses:
        200:
          description: "User successfully deleted."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "User successfully deleted."
          examples:
            application/json:
              {
                "message": "User successfully deleted."
              }

        403:
          description: "Forbidden. The current user is not authorized to delete the user."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "You are not authorized to delete this user."
          examples:
            application/json:
              {
                "message": "You are not authorized to delete this user."
              }

        404:
          description: "User not found."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "User not found."
          examples:
            application/json:
              {
                "message": "User not found."
              }

        401:
          description: "Unauthorized. Invalid or missing JWT token."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Missing or invalid token."
          examples:
            application/json:
              {
                "message": "Missing or invalid token."
              }

securityDefinitions:
  jwtAuth:
    type: "apiKey"
    in: "header"
    name: "Authorization"
    description: "JWT authentication token"
