swagger: "2.0"
info:
  description: "This API allows users to create a new user in the system."
  version: "1.0.0"
  title: "User Management API"

host: "localhost"
basePath: "/api/v1"

paths:
  /users:
    post:
      summary: "Create a new user"
      description: |
        This endpoint allows creating a new user in the system. The following fields
        must be provided: first_name, last_name, username, email, and password.
        The role field is optional, and the default role is 'user'.
        Only admins can assign the 'admin' role during user creation.

      operationId: "createUser"
      tags:
        - "Users"

      parameters:
        - name: "Authorization"
          in: "header"
          description: "JWT authentication token required for accessing this endpoint"
          required: true
          type: "string"
        - name: "body"
          in: "body"
          description: "User data that needs to be created"
          required: true
          schema:
            type: "object"
            properties:
              first_name:
                type: "string"
                description: "The user's first name"
              last_name:
                type: "string"
                description: "The user's last name"
              username:
                type: "string"
                description: "The user's unique username"
              email:
                type: "string"
                description: "The user's email address"
              password:
                type: "string"
                description: "The user's password"
              role:
                type: "string"
                description: "The user's role (default is 'user')"
                enum:
                  - "user"
                  - "admin"
                default: "user"

      responses:
        201:
          description: "User successfully created"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "User created successfully"
              user:
                type: "object"
                properties:
                  id:
                    type: "string"
                    description: "User ID"
                  first_name:
                    type: "string"
                    description: "The user's first name"
                  last_name:
                    type: "string"
                    description: "The user's last name"
                  username:
                    type: "string"
                    description: "The user's unique username"
                  email:
                    type: "string"
                    description: "The user's email address"
                  role:
                    type: "string"
                    description: "The user's role"
                  created_at:
                    type: "string"
                    format: "date-time"
                    description: "The creation timestamp of the user"
                  updated_at:
                    type: "string"
                    format: "date-time"
                    description: "The timestamp when the user was last updated"
          examples:
            application/json:
              message: "User created successfully"
              user:
                id: "125"
                first_name: "Alice"
                last_name: "Smith"
                username: "alice123"
                email: "alice@example.com"
                role: "user"
                created_at: "2025-01-06T12:00:00Z"
                updated_at: "2025-01-06T12:00:00Z"

        400:
          description: "Bad request. Missing or invalid data."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Missing first_name"

        401:
          description: "Unauthorized access. Invalid or missing JWT token."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Missing or invalid JWT token"

        403:
          description: "Forbidden. Only admins can assign the 'admin' role."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Only admins can assign the role of 'Admin'."

        500:
          description: "Internal Server Error. Unable to create the user."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "An error occurred: Unable to save user to database."

      security:
        - jwtAuth: []

securityDefinitions:
  jwtAuth:
    type: "apiKey"
    in: "header"
    name: "Authorization"
    description: "JWT authentication token"
