swagger: "2.0"
info:
  description: "This API allows for creating a new user by providing necessary details."
  version: "1.0.0"
  title: "User Creation API"

host: "localhost"
basePath: "/api/v1"

paths:
  /users:
    post:
      summary: "Create a new user."
      description: |
        This route creates a new user by accepting a JSON payload with the required information.
        It checks for missing fields, validates the data, and ensures no duplicate users exist.
        The new user is returned along with their ID, creation date, and updated date.

      operationId: "createUser"
      tags:
        - "User"

      parameters:
        - name: "body"
          in: "body"
          description: "User data for creating a new account."
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
                example: "johndoe@example.com"
                description: "The user's email address (must be unique and valid)."
              password:
                type: "string"
                example: "Password123"
                description: "The user's password."
              first_name:
                type: "string"
                example: "John"
                description: "The user's first name."
              last_name:
                type: "string"
                example: "Doe"
                description: "The user's last name."
              username:
                type: "string"
                example: "johndoe"
                description: "The user's username (must be unique)."
              role:
                type: "string"
                example: "user"
                description: "The user's role (default is 'user')."
                enum:
                  - "user"
                  - "admin"

      responses:
        201:
          description: "User successfully created."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "User created successfully"
              user:
                type: "object"
                properties:
                  id:
                    type: "integer"
                    example: 1
                    description: "The unique identifier for the user."
                  first_name:
                    type: "string"
                    example: "John"
                  last_name:
                    type: "string"
                    example: "Doe"
                  username:
                    type: "string"
                    example: "johndoe"
                  email:
                    type: "string"
                    example: "johndoe@example.com"
                  role:
                    type: "string"
                    example: "user"
                  created_at:
                    type: "string"
                    example: "2025-01-07T12:00:00Z"
                    description: "The timestamp of when the user was created."
                  updated_at:
                    type: "string"
                    example: "2025-01-07T12:00:00Z"
                    description: "The timestamp of the last update made to the user."

          examples:
            application/json:
              {
                "message": "User created successfully",
                "user": {
                  "id": 1,
                  "first_name": "John",
                  "last_name": "Doe",
                  "username": "johndoe",
                  "email": "johndoe@example.com",
                  "role": "user",
                  "created_at": "2025-01-07T12:00:00Z",
                  "updated_at": "2025-01-07T12:00:00Z"
                }
              }

        400:
          description: "Bad request. Missing or invalid data."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Missing email"
          examples:
            application/json:
              {
                "message": "Missing email"
              }

        403:
          description: "Forbidden. Only admins can assign the 'admin' role."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Only admins can assign the role of 'Admin'."
          examples:
            application/json:
              {
                "message": "Only admins can assign the role of 'Admin'."
              }

        409:
          description: "Conflict. Username or email already exists."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Username already exists!"
          examples:
            application/json:
              {
                "message": "Username already exists!"
              }

securityDefinitions:
  jwtAuth:
    type: "apiKey"
    in: "header"
    name: "Authorization"
    description: "JWT authentication token"
