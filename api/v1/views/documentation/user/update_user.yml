swagger: "2.0"
info:
  description: "This API allows users to update their information or another user's information."
  version: "1.0.0"
  title: "User Management API"

host: "localhost"
basePath: "/api/v1"

paths:
  /users/{user_id}:
    put:
      summary: "Update a user's information"
      description: |
        This endpoint allows an authenticated user to update their personal information.
        Admins can update any user's information, while regular users can only update their own details.

      operationId: "updateUser"
      tags:
        - "Users"

      parameters:
        - name: "Authorization"
          in: "header"
          description: "JWT authentication token required for accessing this endpoint"
          required: true
          type: "string"
        - name: "user_id"
          in: "path"
          description: "The ID of the user to be updated"
          required: true
          type: "string"
        - name: "first_name"
          in: "body"
          description: "The first name of the user (optional)"
          required: false
          type: "string"
        - name: "last_name"
          in: "body"
          description: "The last name of the user (optional)"
          required: false
          type: "string"
        - name: "username"
          in: "body"
          description: "The username of the user (optional)"
          required: false
          type: "string"
        - name: "email"
          in: "body"
          description: "The email address of the user (optional)"
          required: false
          type: "string"
        - name: "password"
          in: "body"
          description: "The password of the user (optional)"
          required: false
          type: "string"

      responses:
        200:
          description: "User information successfully updated"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "User updated successfully!"
              user:
                type: "object"
                properties:
                  id:
                    type: "string"
                  username:
                    type: "string"
                  email:
                    type: "string"
                  created_at:
                    type: "string"
                    format: "date-time"
                  updated_at:
                    type: "string"
                    format: "date-time"

        400:
          description: "Bad request. Invalid or missing fields."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Email already registered!"

        401:
          description: "Unauthorized access. Invalid or missing JWT token."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Missing or invalid JWT token"

        403:
          description: "Forbidden. Only admins or the user themselves can update the account."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "You are not authorized to update this user."

        404:
          description: "User not found."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "User not found"

        500:
          description: "Internal server error. Unable to update the user."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "An error occurred while trying to update the user."

      security:
        - jwtAuth: []

securityDefinitions:
  jwtAuth:
    type: "apiKey"
    in: "header"
    name: "Authorization"
    description: "JWT authentication token"
