swagger: "2.0"
info:
  description: "This API allows an authenticated user or an admin to update a user's information."
  version: "1.0.0"
  title: "Update User API"

host: "localhost"
basePath: "/api/v1"

paths:
  /users/{user_id}:
    put:
      summary: "Update user information."
      description: |
        This route allows an authenticated user or admin to update a user's details 
        (such as first name, last name, username, email, and password). 
        Role updates are restricted to admin users only.
      
      operationId: "updateUser"
      tags:
        - "User"

      parameters:
        - name: "user_id"
          in: "path"
          description: "The unique identifier for the user to be updated."
          required: true
          type: "string"
          
        - name: "body"
          in: "body"
          description: "The fields to be updated for the user."
          required: true
          schema:
            type: "object"
            properties:
              first_name:
                type: "string"
              last_name:
                type: "string"
              username:
                type: "string"
              email:
                type: "string"
              password:
                type: "string"
              role:
                type: "string"
                enum: ["user", "admin"]

      security:
        - jwtAuth: []

      responses:
        200:
          description: "User updated successfully."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "User updated successfully!"
              user:
                type: "object"
                properties:
                  id:
                    type: "string"
                    example: "12345"
                  first_name:
                    type: "string"
                    example: "John"
                  last_name:
                    type: "string"
                    example: "Doe"
                  username:
                    type: "string"
                    example: "johndoe"
                  email:
                    type: "string"
                    example: "john.doe@example.com"
                  role:
                    type: "string"
                    example: "user"
                  created_at:
                    type: "string"
                    format: "date-time"
                    example: "2025-01-07T00:00:00Z"
                  updated_at:
                    type: "string"
                    format: "date-time"
                    example: "2025-01-07T12:00:00Z"
          examples:
            application/json:
              {
                "message": "User updated successfully!",
                "user": {
                  "id": "12345",
                  "first_name": "John",
                  "last_name": "Doe",
                  "username": "johndoe",
                  "email": "john.doe@example.com",
                  "role": "user",
                  "created_at": "2025-01-07T00:00:00Z",
                  "updated_at": "2025-01-07T12:00:00Z"
                }
              }

        403:
          description: "Forbidden. The current user is not authorized to update this user."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "You are not authorized to update this user."
          examples:
            application/json:
              {
                "message": "You are not authorized to update this user."
              }

        404:
          description: "User not found."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "User not found!"
          examples:
            application/json:
              {
                "message": "User not found!"
              }

        400:
          description: "Bad Request. Invalid input data."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Invalid email format."
          examples:
            application/json:
              {
                "message": "Invalid email format."
              }

        401:
          description: "Unauthorized. Invalid or missing JWT token."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Missing or invalid token."
          examples:
            application/json:
              {
                "message": "Missing or invalid token."
              }

securityDefinitions:
  jwtAuth:
    type: "apiKey"
    in: "header"
    name: "Authorization"
    description: "JWT authentication token"
