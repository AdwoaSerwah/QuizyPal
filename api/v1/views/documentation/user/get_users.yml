info:
  description: "This API retrieves a list of all users from the storage."
  version: "1.0.0"
  title: "Get Users API"

host: "localhost"
basePath: "/api/v1"

paths:
  /users:
    get:
      summary: "Retrieve all users."
      description: |
        This route retrieves all user records from the storage and returns them as a 
        JSON array. If no users are found, an empty list is returned.
      
      operationId: "getUsers"
      tags:
        - "User"
        
      security:
        - jwtAuth: []

      responses:
        200:
          description: "Successfully retrieved the list of users."
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                id:
                  type: "integer"
                  example: 1
                  description: "The unique identifier for the user."
                first_name:
                  type: "string"
                  example: "John"
                last_name:
                  type: "string"
                  example: "Doe"
                username:
                  type: "string"
                  example: "johndoe"
                email:
                  type: "string"
                  example: "johndoe@example.com"
                role:
                  type: "string"
                  example: "user"
                created_at:
                  type: "string"
                  example: "2025-01-07T12:00:00Z"
                  description: "The timestamp when the user was created."
                updated_at:
                  type: "string"
                  example: "2025-01-07T12:00:00Z"
                  description: "The timestamp of the last update made to the user."

          examples:
            application/json:
              [
                {
                  "id": 1,
                  "first_name": "John",
                  "last_name": "Doe",
                  "username": "johndoe",
                  "email": "johndoe@example.com",
                  "role": "user",
                  "created_at": "2025-01-07T12:00:00Z",
                  "updated_at": "2025-01-07T12:00:00Z"
                },
                {
                  "id": 2,
                  "first_name": "Jane",
                  "last_name": "Smith",
                  "username": "janesmith",
                  "email": "janesmith@example.com",
                  "role": "admin",
                  "created_at": "2025-01-07T12:00:00Z",
                  "updated_at": "2025-01-07T12:00:00Z"
                }
              ]

        401:
          description: "Unauthorized. Invalid or missing JWT token."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Missing or invalid token."
          examples:
            application/json:
              {
                "message": "Missing or invalid token."
              }

securityDefinitions:
  jwtAuth:
    type: "apiKey"
    in: "header"
    name: "Authorization"
    description: "JWT authentication token"
