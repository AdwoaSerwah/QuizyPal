swagger: "2.0"
info:
  description: "This API retrieves a specific user based on their user_id."
  version: "1.0.0"
  title: "Get User API"

host: "localhost"
basePath: "/api/v1"

paths:
  /users/{user_id}:
    get:
      summary: "Retrieve a specific user by their user_id."
      description: |
        This route retrieves a user from the storage by the provided user_id. 
        If the user is not found, a 404 error is returned.
      
      operationId: "getUser"
      tags:
        - "User"

      parameters:
        - name: "user_id"
          in: "path"
          description: "The unique identifier for the user."
          required: true
          type: "string"

      security:
        - jwtAuth: []

      responses:
        200:
          description: "Successfully retrieved the user."
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
                example: 1
                description: "The unique identifier for the user."
              first_name:
                type: "string"
                example: "John"
              last_name:
                type: "string"
                example: "Doe"
              username:
                type: "string"
                example: "johndoe"
              email:
                type: "string"
                example: "johndoe@example.com"
              role:
                type: "string"
                example: "user"
              created_at:
                type: "string"
                example: "2025-01-07T12:00:00Z"
                description: "The timestamp when the user was created."
              updated_at:
                type: "string"
                example: "2025-01-07T12:00:00Z"
                description: "The timestamp of the last update made to the user."

          examples:
            application/json:
              {
                "id": 1,
                "first_name": "John",
                "last_name": "Doe",
                "username": "johndoe",
                "email": "johndoe@example.com",
                "role": "user",
                "created_at": "2025-01-07T12:00:00Z",
                "updated_at": "2025-01-07T12:00:00Z"
              }

        404:
          description: "User not found."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "User not found"
          examples:
            application/json:
              {
                "message": "User not found"
              }

        401:
          description: "Unauthorized. Invalid or missing JWT token."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Missing or invalid token."
          examples:
            application/json:
              {
                "message": "Missing or invalid token."
              }

securityDefinitions:
  jwtAuth:
    type: "apiKey"
    in: "header"
    name: "Authorization"
    description: "JWT authentication token"
