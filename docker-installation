# Install docker engine
sudo apt update
sudo apt install apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt update
sudo apt install docker-ce

# Verify that Docker was installed correctly
sudo docker --version

# Install Docker Compose
sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

# Verify Docker Compose is installed
docker-compose --version

# Start Docker after installation
sudo systemctl start docker

# Enable Docker to start on boot:
# If you want Docker to start automatically when your system boots
sudo systemctl enable docker

# Set the MySQL credentials in docker-compose.yml file
# Store the actual credentials in .env to protect sensitive info

# In docker-compose.yml file:
environment:
  MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
  MYSQL_DATABASE: ${MYSQL_DATABASE}
  MYSQL_USER: ${MYSQL_USER}
  MYSQL_PASSWORD: ${MYSQL_PASSWORD}

# In .env set the actual values:
MYSQL_ROOT_PASSWORD=root_password
MYSQL_DATABASE=database_name # Example: quizypal_db
MYSQL_USER=user
MYSQL_PASSWORD=user_password

# Build the services (app and db) as per the configurations and
# start the containers for your app and MySQL database.

# Option 1: you have to use sudo every time:
sudo docker-compose up --build

# Option 2: Allows you to run Docker commands without sudo

# Add your user to the Docker group:
sudo usermod -aG docker $USER

# Then log out and log back in (or restart your terminal session)
# for the changes to take effect OR run this to apply
# immediately (no logout or restart needed). 
newgrp docker

# If you have MySQL installed locally and it's running,
# you can stop it to free up the port.
sudo systemctl stop mysql

# Then run this again
docker-compose up --build

# OR If you want to keep your local MySQL service running and
# avoid port conflicts, you can change the MySQL port in the
# docker-compose.yml file.
# For example, change the 3306 port to a different port (e.g., 3307)
# in the db service:

db:
  image: mysql:5.7
  container_name: quizypal_db
  environment:
    MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    MYSQL_DATABASE: ${MYSQL_DATABASE}
    MYSQL_USER: ${MYSQL_USER}
    MYSQL_PASSWORD: ${MYSQL_PASSWORD}
  ports:
    - "3307:3306"  # Change this line to use a different local port (e.g., 3307)
  volumes:
    - quizypal_db_data:/var/lib/mysql

# Then run this again
docker-compose up --build

# OR 
# build the container
docker-compose build

# Then start the container
docker-compose up

# To start the container and ensure everything is set up (including
# rebuilding images if necessary)
docker-compose up

# To stop and remove containers, networks, and possibly volumes and
# images. (in case you need to rebuild or something)
docker-compose down

# Temporarily stops the running containers but does not remove/delete them
docker-compose stop

# Starts already created containers that were previously stopped
# without rebuilding or changing anything.
docker-compose start

# Verify the Containers are Running
docker ps

# Ensure your application can connect to the MySQL database.
# You can access the MySQL database from within the container using:
docker exec -it quizypal_db mysql -u root -p

# Verify that Redis is working correctly:
docker exec -it quizypal_redis redis-cli

# Monitor the logs for any errors or issues:
docker logs quizypal_app



